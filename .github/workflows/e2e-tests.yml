name: E2E Tests

on:
  push:

jobs:
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/client/.next
            packages/server/dist
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-build-

      - name: Build project
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Copy initial data for server
        run: |
          cd packages/server
          if [ ! -d "data" ]; then
            cp -r data-initial data
          fi

      - name: Start server
        run: |
          cd packages/server
          nohup npm run start > server.log 2>&1 &
          echo $! > server.pid
          echo "Server started with PID $(cat server.pid)"
        env:
          NODE_ENV: test

      - name: Start client
        run: |
          cd packages/client
          nohup npm run start:next > client.log 2>&1 &
          echo $! > client.pid
          echo "Client started with PID $(cat client.pid)"
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:8000
          NEXT_PUBLIC_STORAGE_URL: http://localhost:8000/api/files

      - name: Wait for services to be ready
        run: |
          echo "Waiting for server to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:8000/health > /dev/null 2>&1; do echo "Server not ready yet..."; sleep 3; done'
          echo "Server is ready"
          
          echo "Waiting for client to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do echo "Client not ready yet..."; sleep 3; done'
          echo "Client is ready"

      - name: Run E2E tests
        run: npm run test-e2e
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: Debug logs on failure
        if: failure()
        run: |
          echo "=== Server logs ==="
          cat packages/server/server.log || echo "No server logs found"
          echo "=== Client logs ==="
          cat packages/client/client.log || echo "No client logs found"

      - name: Cleanup processes
        if: always()
        run: |
          if [ -f packages/server/server.pid ]; then
            echo "Killing server PID $(cat packages/server/server.pid)"
            kill $(cat packages/server/server.pid) || true
          fi
          if [ -f packages/client/client.pid ]; then
            echo "Killing client PID $(cat packages/client/client.pid)"
            kill $(cat packages/client/client.pid) || true
          fi
          # Kill any remaining node processes
          pkill -f "node.*dist/index.js" || true
          pkill -f "next start" || true
