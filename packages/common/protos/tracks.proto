syntax = "proto3";

package music.tracks.v1;

import "google/protobuf/timestamp.proto";

enum SortField {
  SORT_FIELD_UNSPECIFIED = 0;
  SORT_FIELD_TITLE = 1;
  SORT_FIELD_ARTIST = 2;
  SORT_FIELD_ALBUM = 3;
  SORT_FIELD_CREATED_AT = 4;
}

enum SortOrder {
  SORT_ORDER_UNSPECIFIED = 0;
  SORT_ORDER_ASC = 1;
  SORT_ORDER_DESC = 2;
}

message Track {
  string id = 1;
  string title = 2;
  string artist = 3;
  optional string album = 4;
  repeated string genres = 5;
  string slug = 6;
  optional string cover_image = 7;
  optional string audio_file = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

message QueryParams {
  optional int32 page = 1;
  optional int32 limit = 2;
  optional SortField sort = 3;
  optional SortOrder order = 4;
  optional string search = 5;
  optional string genre = 6;
  optional string artist = 7;
}

message PaginationMeta {
  int32 total = 1;
  int32 page = 2;
  int32 limit = 3;
  int32 total_pages = 4;
}

message GetTracksRequest {
  QueryParams query_params = 1;
}

message GetTracksResponse {
  repeated Track data = 1;
  PaginationMeta meta = 2;
}

message GetTrackRequest {
  string slug = 1;
}

message GetTrackResponse {
  Track track = 1;
}

message CreateTrackRequest {
  string title = 1;
  string artist = 2;
  optional string album = 3;
  repeated string genres = 4;
  optional string cover_image = 5;
}

message CreateTrackResponse {
  Track track = 1;
}

message UpdateTrackRequest {
  string id = 1;
  optional string title = 2;
  optional string artist = 3;
  optional string album = 4;
  repeated string genres = 5;
  optional string cover_image = 6;
  optional string audio_file = 7;
}

message UpdateTrackResponse {
  Track track = 1;
}

message DeleteTrackRequest {
  string id = 1;
}

message DeleteTrackResponse {
  bool success = 1;
  string message = 2;
}

message DeleteTracksRequest {
  repeated string ids = 1;
}

message DeleteTracksResponse {
  repeated string success = 1;
  repeated string failed = 2;
}

message FileChunk {
  bytes data = 1;
  int32 chunk_number = 2;
  int32 total_chunks = 3;
}

message UploadTrackRequest {
  oneof request {
    UploadTrackMetadata metadata = 1;
    FileChunk chunk = 2;
  }
}

message UploadTrackMetadata {
  string track_id = 1;
  string file_name = 2;
  string content_type = 3;
  int64 file_size = 4;
}

message UploadTrackResponse {
  oneof response {
    UploadProgress progress = 1;
    UploadComplete complete = 2;
  }
}

message UploadProgress {
  int64 bytes_uploaded = 1;
  int64 total_bytes = 2;
  float percentage = 3;
}

message UploadComplete {
  Track track = 1;
  string file_url = 2;
}

message DeleteTrackFileRequest {
  string id = 1;
}

message DeleteTrackFileResponse {
  bool success = 1;
  string message = 2;
}

service TracksService {
  rpc GetTracks(GetTracksRequest) returns (GetTracksResponse);
  rpc GetTrack(GetTrackRequest) returns (GetTrackResponse);
  rpc CreateTrack(CreateTrackRequest) returns (CreateTrackResponse);
  rpc UpdateTrack(UpdateTrackRequest) returns (UpdateTrackResponse);
  rpc DeleteTrack(DeleteTrackRequest) returns (DeleteTrackResponse);
  rpc DeleteTracks(DeleteTracksRequest) returns (DeleteTracksResponse);
  rpc UploadTrack(stream UploadTrackRequest) returns (stream UploadTrackResponse);
  rpc DeleteTrackFile(DeleteTrackFileRequest) returns (DeleteTrackFileResponse);
}
